#
# JavaScript versions -- from the TextMate bundle + some additions
# for jasmine-jquery matchers
#
extends javascript

# This is a simple global Python function to return a space if the provided
# stop was not blank.
global !p
_pad = lambda t, c: " " if len(t[c]) else ""
endglobal

snippet fn "JavaScript function" !
function ${1:myFunction} (`!p snip.rv = _pad(t,2)`${2}`!p snip.rv = _pad(t,2)`) {
  $0
}
endsnippet

snippet if "JavaScript if statement" !b
if ( $1 ) {
  $0
}
endsnippet

snippet ife "JavaScript if/else statement" !b
if ( ${1:true} ) {
  $2
} else {
  $3
}
endsnippet

###
# Jasmine Query Matchers
###

snippet des "Describe (js)" b
describe( '${1:description}', function() {
	$0
});
endsnippet

snippet it "it (js)" b
it( '${1:description}', inject( function(`!p snip.rv = _pad(t,2)`${2}`!p snip.rv = _pad(t,2)`) {
	$0
}));
endsnippet

snippet bef "before each (js)" b
beforeEach( inject( function(`!p snip.rv = _pad(t,1)`${1}`!p snip.rv = _pad(t,1)`) {
	$0
}));
endsnippet

snippet befmod "AngularJS beforeEach module loading" !b
beforeEach( module( '${1:myModule}' ) );
endsnippet

snippet aft "after each (js)" b
afterEach( function() {
	$0
});
endsnippet

snippet any "any (js)" b
jasmine.any( $1 )
endsnippet

snippet ru "runs (js)" b
runs( function() {
	$0
});
endsnippet

snippet wa "waits (js)" b
waits( $1 );
endsnippet

snippet ex "expect (js)" b
expect( ${1:target} )$0;
endsnippet

snippet ee "expect to equal (js)" b
expect( ${1:target} ).toEqual( ${2:value} );
endsnippet

snippet em "expect to match (js)" b
expect( ${1:target} ).toMatch( ${2:pattern} );
endsnippet

snippet eha "expect to have attribute (js)" b
expect( ${1:target} ).toHaveAttr( '${2:attr}'${3:, '${4:value}'} );
endsnippet

snippet et "expect to be truthy (js)" b
expect( ${1:target} ).toBeTruthy();
endsnippet

snippet ef "expect to be falsy (js)" b
expect( ${1:target} ).toBeFalsy();
endsnippet

snippet ed "expect to be defined (js)" b
expect( ${1:target} ).toBeDefined();
endsnippet

snippet en "expect to be null (js)" b
expect( ${1:target} ).toBeNull();
endsnippet

snippet ec "expect to contain (js)" b
expect( ${1:target} ).toContain( ${2:value} );
endsnippet

snippet ev "expect to be visible (js)" b
expect( ${1:target} ).toBeVisible();
endsnippet

snippet eh "expect to be hidden (js)" b
expect( ${1:target} ).toBeHidden();
endsnippet

snippet notx "expect not (js)" b
expect( ${1:target} ).not$0;
endsnippet

snippet note "expect not to equal (js)" b
expect( ${1:target} ).not.toEqual( ${2:value} );
endsnippet

snippet notm "expect not to match (js)" b
expect( ${1:target} ).not.toMatch( ${2:pattern}) ;
endsnippet

snippet notha "expect to not have attribute (js)" b
expect( ${1:target} ).not.toHaveAttr( '${2:attr}'${3:, '${4:value}'} );
endsnippet

snippet nott "expect not to be truthy (js)" b
expect( ${1:target} ).not.toBeTruthy();
endsnippet

snippet notf "expect not to be falsy (js)" b
expect( ${1:target} ).not.toBeFalsy();
endsnippet

snippet notd "expect not to be defined (js)" b
expect( ${1:target} ).not.toBeDefined();
endsnippet

snippet notn "expect not to be null (js)" b
expect( ${1:target} ).not.toBeNull();
endsnippet

snippet notc "expect not to contain (js)" b
expect( ${1:target} ).not.toContain( ${2:value} );
endsnippet

snippet notv "expect not to be visible (js)" b
expect( ${1:target} ).not.toBeVisible();
endsnippet

snippet noth "expect not to be hidden (js)" b
expect( ${1:target} ).not.toBeHidden();
endsnippet

snippet s "spy on (js)" b
spyOn( ${1:object}, '${2:method}' )$0;
endsnippet

snippet sr "spy on and return (js)" b
spyOn( ${1:object}, '${2:method}' ).andReturn( ${3:arguments} );
endsnippet

snippet st "spy on and throw (js)" b
spyOn( ${1:object}, '${2:method}' ).andThrow( ${3:exception} );
endsnippet

snippet sct "spy on and call through (js)" b
spyOn( ${1:object}, '${2:method}' ).andCallThrough();
endsnippet

snippet scf "spy on and call fake (js)" b
spyOn( ${1:object}, '${2:method}' ).andCallFake( ${3:function} );
endsnippet

snippet esc "expect was called (js)" b
expect( ${1:target} ).wasCalled();
endsnippet

snippet escw "expect was called with (js)" b
expect( ${1:target} ).wasCalledWith( ${2:arguments} );
endsnippet

snippet notsc "expect was not called (js)" b
expect( ${1:target} ).wasNotCalled();
endsnippet

snippet noscw "expect was not called with (js)" b
expect( ${1:target} ).wasNotCalledWith( ${2:arguments} );
endsnippet

#
# AngularJS Snippets
#

snippet ctrl "An AngularJS Controller Function" !b
.controller( '${1:MyCtrl}', [ '$scope', function $1( $scope ) {
  $0
}])
endsnippet

snippet ngctrlf "A function within an AngularJS controller" !b
$scope.${1:myFunctionName} = function(`!p snip.rv = _pad(t,2)`${2}`!p snip.rv = _pad(t,2)`) {
  $0
}
endsnippet

snippet module "An AngularJS Module Definition" !b
angular.module( '${1:MyModule}', [
  $2
])$0
endsnippet

snippet directive "A generic AngularJS directive" !b
.directive( '${1:MyDirective}', [ function() {
  return {
    scope: ${2:true},
    link: function( scope, element, attrs ) {
      $3
    }
  };
}])$0
endsnippet

snippet ngdl "An AngularJS Directive with a `link` Function" !b
.directive( '${1:MyDirective}', function(`!p snip.rv = _pad(t,2)`${2}`!p snip.rv = _pad(t,2)`) {

  return function( scope, element, attrs ) {
    $0
  }

});
endsnippet

snippet ngdc "An AngularJS Directive with a `compile` Function" !
.directive( '${1:MyDirective}', function factory(`!p snip.rv = _pad(t,2)`${2}`!p snip.rv = _pad(t,2)`) {

  var $1Object = {
    ${2}
    compile: function compile( tElement, tAttrs, transclude ) {
      
      return function( scope, element, attrs ) {
        $0
      }

    }
  }

});
endsnippet

snippet link "An AngularJS `link` Function" !
link: function link ( scope, element, attrs ) {
  $0
}
endsnippet

snippet compile "An AngularJS `compile` Function" !
compile: function compile ( tElement, tAttrs, transclude ) {
  $0
  return function link ( scope, element, attrs ) {
  }

}
endsnippet

snippet obs "An attrs.$observe function for use in the `link` function" !b
attrs.$observe( '${1:attribute}', function ( $1 ) {
  $0
});
endsnippet

snippet svc "An AngularJS factory service" !b
.factory( '${1:myFactory}', [ function () {
  $0
}]);
endsnippet

snippet run "A config block for the $routeProvider" !b
.run([ '${1:$rootScope}', function config( $1 ) {
  $0
}])
endsnippet

snippet ngr "A config block for the $routeProvider" !b
.config([ '$routeProvider', function config( $routeProvider ) {
  $0
}])
endsnippet

snippet rpwhen "A `when` statement on the $routeProvider" !b
$routeProvider.when( '${1:/route}', {
  controller: '${2:RouteCtrl}',
  templateUrl: '${3:mod/file}.tpl.html'
});$0
endsnippet

